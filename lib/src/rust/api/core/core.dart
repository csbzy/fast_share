// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.0.0-dev.24.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import '../command.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Arc < Mutex < Option < tokio :: net :: TcpListener > > >>>
@sealed
class ArcMutexOptionTokioNetTcpListener extends RustOpaque {
  ArcMutexOptionTokioNetTcpListener.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ArcMutexOptionTokioNetTcpListener.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_ArcMutexOptionTokioNetTcpListener,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_ArcMutexOptionTokioNetTcpListener,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_ArcMutexOptionTokioNetTcpListenerPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Arc < Mutex < Receiver < String > > >>>
@sealed
class ArcMutexReceiverString extends RustOpaque {
  ArcMutexReceiverString.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ArcMutexReceiverString.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ArcMutexReceiverString,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ArcMutexReceiverString,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ArcMutexReceiverStringPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<Arc < Mutex < Sender < String > > >>>
@sealed
class ArcMutexSenderString extends RustOpaque {
  ArcMutexSenderString.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  ArcMutexSenderString.sseDecode(int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib
        .instance.api.rust_arc_increment_strong_count_ArcMutexSenderString,
    rustArcDecrementStrongCount: RustLib
        .instance.api.rust_arc_decrement_strong_count_ArcMutexSenderString,
    rustArcDecrementStrongCountPtr: RustLib
        .instance.api.rust_arc_decrement_strong_count_ArcMutexSenderStringPtr,
  );
}

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::rust_async::RwLock<std :: sync :: Arc < Mutex < Option < JustShareCore > > >>>
@sealed
class StdSyncArcMutexOptionJustShareCore extends RustOpaque {
  StdSyncArcMutexOptionJustShareCore.dcoDecode(List<dynamic> wire)
      : super.dcoDecode(wire, _kStaticData);

  StdSyncArcMutexOptionJustShareCore.sseDecode(
      int ptr, int externalSizeOnNative)
      : super.sseDecode(ptr, externalSizeOnNative, _kStaticData);

  static final _kStaticData = RustArcStaticData(
    rustArcIncrementStrongCount: RustLib.instance.api
        .rust_arc_increment_strong_count_StdSyncArcMutexOptionJustShareCore,
    rustArcDecrementStrongCount: RustLib.instance.api
        .rust_arc_decrement_strong_count_StdSyncArcMutexOptionJustShareCore,
    rustArcDecrementStrongCountPtr: RustLib.instance.api
        .rust_arc_decrement_strong_count_StdSyncArcMutexOptionJustShareCorePtr,
  );
}

class JustShareCore {
  final JustShareCoreConfig config;
  final ArcMutexSenderString sender;
  final ArcMutexReceiverString receiver;
  final ArcMutexOptionTokioNetTcpListener listener;

  const JustShareCore({
    required this.config,
    required this.sender,
    required this.receiver,
    required this.listener,
  });

  static Future<JustShareCore> newJustShareCore(
          {required JustShareCoreConfig config, dynamic hint}) =>
      RustLib.instance.api.justShareCoreNew(config: config, hint: hint);

  @override
  int get hashCode =>
      config.hashCode ^ sender.hashCode ^ receiver.hashCode ^ listener.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is JustShareCore &&
          runtimeType == other.runtimeType &&
          config == other.config &&
          sender == other.sender &&
          receiver == other.receiver &&
          listener == other.listener;
}

class JustShareCoreConfig {
  final int port;

  const JustShareCoreConfig({
    required this.port,
  });

  @override
  int get hashCode => port.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is JustShareCoreConfig &&
          runtimeType == other.runtimeType &&
          port == other.port;
}

class MutexJustShareCore {
  final StdSyncArcMutexOptionJustShareCore core;

  const MutexJustShareCore({
    required this.core,
  });

  static Future<void> handleReceiveFile(
          {required StdSyncArcMutexOptionJustShareCore core, dynamic hint}) =>
      RustLib.instance.api
          .mutexJustShareCoreHandleReceiveFile(core: core, hint: hint);

  static Future<MutexJustShareCore> newMutexJustShareCore({dynamic hint}) =>
      RustLib.instance.api.mutexJustShareCoreNew(hint: hint);

  Future<void> sendFile({required SendFile message, dynamic hint}) =>
      RustLib.instance.api.mutexJustShareCoreSendFile(
        that: this,
        message: message,
      );

  @override
  int get hashCode => core.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MutexJustShareCore &&
          runtimeType == other.runtimeType &&
          core == other.core;
}
